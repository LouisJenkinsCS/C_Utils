/*! \mainpage Thread Pool
 * 
 * @author Louis Jenkins
 * @version 1.0
 *
 * \section list_summary Summary
 *
 * The Thread Pool in this package will allow you to, the developer, to abstract the need to handle threads and their lifetimes by leaving it up to my thread pool 
 * implementation. Unlike other thread pools available for C, this one offers the ability to pause/resume and obtain the result from a task submitted. 
 *
 *
 * \section list_features Features
 *
 * \subsection results Get Results!
 *
 * This thread pool returns a Result struct which allows you to wait on the returned value from a structure. Also, in the future this feature will be optional.
 *
 * \subsection pause_and_resume Pause all tasks to be resumed later!
 *
 * This thread pool also features a way to pause the current tasks in it's tracks, safely, and then resume at a later time. Note that while it may safely pause and 
 * resume, this may lead to undefined behavior if you are doing critical operations, as in the futrue there will be a feature to prevent this.
 *
 * \subsection priority Prioritize your tasks! (Future)
 *
 * Allows you to submit a higher priority task ahead of the tasks of lower priority.
 *
 * \subsection recover Recovery from segmentation faults and errors (Future)
 *
 * The Thread Pool can continue operation and just terminate the current thread, spawning a new one to take it's place, either resuming other tasks or abort all 
 * tasks and cleanup at the user's choice.
 *
 * \section notes Notes and Disclaimers
 *  
 * There can, safely, only be one instance of this thread pool, as it's thread pool struct is a static variable.
 */