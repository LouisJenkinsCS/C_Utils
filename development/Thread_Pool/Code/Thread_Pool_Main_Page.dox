/*! \mainpage Thread Pool
 * 
 * @author Louis Jenkins
 * @version 1.1
 *
 * \section list_summary Summary
 *
 * The Thread Pool in this package will allow you to, the developer, to abstract the need to handle threads and their lifetimes by leaving it up to my thread pool 
 * implementation. Unlike other thread pools available for C, this one offers the ability to pause/resume and obtain the result from a task submitted. 
 *
 *
 * \section list_features Features
 *
 * \subsection results Get Results!
 *
 * This thread pool returns a Result struct which allows you to wait on the returned value from a task. This feature is entirely optional, tasks
 * can be flagged to not to return a result, hence eliminating the need to handle memory management of the result. 
 *
 * \subsection pause_and_resume Pause all tasks to be resumed later!
 *
 * Pause all tasks to be resumed later. Tasks can also be flagged to not be paused, hence the thread processing it will pause only after it finishes.
 *
 * \subsection priority Prioritize your tasks!
 *
 * Allows you to submit a higher priority task ahead of the tasks of lower priority.
 *
 * \subsection recover Recovery from segmentation faults and errors (Future)
 *
 * The Thread Pool can continue operation and just terminate the current thread, spawning a new one to take it's place, either resuming other tasks 
 * abort all tasks and cleanup at the user's choice.
 *
 * \subsection parameters Dynamic parameters based on the flags you want!
 *
 * Use of bitmasking to pass multiple flags as a parameter, with it's own default behavior if you exclude them.
 *
 * \section notes Notes and Disclaimers
 *  
 * There can, safely, only be one instance of this thread pool, as it's thread pool struct is a static variable.
 */